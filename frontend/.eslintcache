[{"/home/ngustavin/dev/react-notes-app/frontend/src/styles/GlobalStyle.ts":"1","/home/ngustavin/dev/react-notes-app/frontend/src/components/cardpopup/index.tsx":"2","/home/ngustavin/dev/react-notes-app/frontend/src/components/card/index.tsx":"3","/home/ngustavin/dev/react-notes-app/frontend/src/App.tsx":"4","/home/ngustavin/dev/react-notes-app/frontend/src/index.tsx":"5","/home/ngustavin/dev/react-notes-app/frontend/src/components/landing/style.ts":"6","/home/ngustavin/dev/react-notes-app/frontend/src/components/createNotePopup/index.tsx":"7","/home/ngustavin/dev/react-notes-app/frontend/src/services/api.ts":"8","/home/ngustavin/dev/react-notes-app/frontend/src/components/createNotePopup/styles.ts":"9"},{"size":419,"mtime":1607469052541,"results":"10","hashOfConfig":"11"},{"size":1162,"mtime":1608176154751,"results":"12","hashOfConfig":"11"},{"size":1795,"mtime":1608174552340,"results":"13","hashOfConfig":"11"},{"size":711,"mtime":1608174789561,"results":"14","hashOfConfig":"11"},{"size":197,"mtime":1607469052541,"results":"15","hashOfConfig":"11"},{"size":757,"mtime":1607469052541,"results":"16","hashOfConfig":"11"},{"size":1372,"mtime":1608177705875,"results":"17","hashOfConfig":"11"},{"size":114,"mtime":1608163854778,"results":"18","hashOfConfig":"11"},{"size":1509,"mtime":1608177939934,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1z0ytq8",{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/ngustavin/dev/react-notes-app/frontend/src/styles/GlobalStyle.ts",[],"/home/ngustavin/dev/react-notes-app/frontend/src/components/cardpopup/index.tsx",["40"],"/home/ngustavin/dev/react-notes-app/frontend/src/components/card/index.tsx",["41","42"],"import React, { useEffect, useState } from 'react'\nimport {  MdShare, MdClear } from 'react-icons/md'\nimport api from '../../services/api'\nimport { MainCard, Note, Toolbar } from './style'\n\nimport CardPopup from '../cardpopup'\n\ninterface Note {\n    title: string,\n    body: string,\n    id: string,\n}\n\nconst Card: Function = (): JSX.Element[] => {\n    const [ notes, setNotes ] = useState<Note[]>([])\n\n    useEffect(() => {\n      api.get('notes').then(response => {\n        setNotes(response.data)\n      })\n    }, [])\n\n    function deleteNote(id: string) {\n        api.delete(`notes/${id}`)\n\n        setNotes(notes.filter(note => note.id != id))\n    }\n\n    function shareNote(note: Note) {\n        let shareText = `${note.title}\\n\\n${note.body}\\n\\n\\nID da Nota: ${note.id}`\n\n        navigator.clipboard.writeText(shareText)\n    }\n    \n    return notes.map(note => { \n        return (\n            <MainCard key={note.id}>\n                <Note>\n                    <h1>{ note?.title } </h1>\n                    <p> { note?.body }  </p>\n                </Note>\n\n                <Toolbar>\n                    <button type=\"button\"><CardPopup/></button>\n                    \n\n                    <button type=\"submit\">\n                        <MdShare\n                            size={19}\n                            fill={'white'}\n                            onClick={() => { shareNote(note) }}\n                        />\n                    </button>\n\n                    <button type=\"submit\" onClick={() => { deleteNote(note?.id) }}>\n                        <MdClear\n                            size={19}\n                            fill={'white'}\n                        />\n                    </button>\n                </Toolbar>\n            </MainCard>\n        )\n    })\n}\n\nexport default Card",["43","44"],"/home/ngustavin/dev/react-notes-app/frontend/src/App.tsx",["45"],"/home/ngustavin/dev/react-notes-app/frontend/src/index.tsx",[],"/home/ngustavin/dev/react-notes-app/frontend/src/components/landing/style.ts",[],"/home/ngustavin/dev/react-notes-app/frontend/src/components/createNotePopup/index.tsx",["46"],"/home/ngustavin/dev/react-notes-app/frontend/src/services/api.ts",[],"/home/ngustavin/dev/react-notes-app/frontend/src/components/createNotePopup/styles.ts",[],{"ruleId":"47","severity":1,"message":"48","line":6,"column":10,"nodeType":"49","messageId":"50","endLine":6,"endColumn":19},{"ruleId":"51","severity":1,"message":"52","line":8,"column":11,"nodeType":"49","messageId":"53","endLine":8,"endColumn":15},{"ruleId":"54","severity":1,"message":"55","line":26,"column":47,"nodeType":"56","messageId":"57","endLine":26,"endColumn":49},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"47","severity":1,"message":"62","line":9,"column":10,"nodeType":"49","messageId":"50","endLine":9,"endColumn":15},{"ruleId":"47","severity":1,"message":"63","line":3,"column":8,"nodeType":"49","messageId":"50","endLine":3,"endColumn":13},"@typescript-eslint/no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","@typescript-eslint/no-redeclare","'Note' is already defined.","redeclared","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-native-reassign",["64"],"no-negated-in-lhs",["65"],"'MdAdd' is defined but never used.","'Popup' is defined but never used.","no-global-assign","no-unsafe-negation"]